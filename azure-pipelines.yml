# Azure Pipelines for Tusk MCP Server
# Python-based CI/CD pipeline following COA team standards

name: 'Tusk MCP Server - v$(majorVersion).$(minorVersion).$(patchVersion)'

trigger:
  branches:
    include:
      - main
      - develop
      - release/*
  tags:
    include:
      - v*
  paths:
    exclude:
      - "**/*.md"
      - ".gitignore"
      - "docs/**"

pr:
  branches:
    include:
      - main
      - develop

# Parameters for manual runs
parameters:
  - name: publishToPyPI
    displayName: 'Publish to PyPI?'
    type: boolean
    default: false
  - name: createGitTag
    displayName: 'Create Git tag for release?'
    type: boolean
    default: true

pool:
  name: "Default" # Using local Windows agent pool

variables:
  buildConfiguration: "Release"
  pythonVersion: "3.12"
  # Base version for Tusk MCP - v0.1.0
  majorVersion: 0
  minorVersion: 1
  # Auto-incrementing patch version - increments on every build
  patchVersion: $[counter(format('{0}.{1}', variables['majorVersion'], variables['minorVersion']), 0)]
  versionPrefix: "$(majorVersion).$(minorVersion).$(patchVersion)"
  versionSuffix: ""
  # Windows-specific settings
  PIP_CACHE_DIR: $(Pipeline.Workspace)\.pip
  # Manual run parameters
  shouldPublishToPyPI: ${{ parameters.publishToPyPI }}
  shouldCreateTag: ${{ parameters.createGitTag }}
  # Determine if this is a release build
  isRelease: ${{ eq(variables['Build.Reason'], 'Manual') }}

stages:
  - stage: Build
    displayName: "Build and Test"
    jobs:
      - job: BuildAndTest
        displayName: "Build, Test, and Pack"

        strategy:
          matrix:
            Python312:
              python.version: '3.12'

        steps:
          - checkout: self
            fetchDepth: 0
            clean: true

          - powershell: |
              Write-Host "Agent Information:"
              Write-Host "=================="
              Write-Host "Agent Name: $env:AGENT_NAME"
              Write-Host "Agent OS: $env:AGENT_OS"
              Write-Host "Agent Version: $env:AGENT_VERSION"
              Write-Host "OS Version: $([System.Environment]::OSVersion.VersionString)"
              Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
              Write-Host "Python Version: $(python.version)"
              Write-Host "=================="
            displayName: "Display agent information"

          - task: Cache@2
            displayName: "Cache pip packages"
            inputs:
              key: 'pip | "$(Agent.OS)" | "$(python.version)" | pyproject.toml'
              restoreKeys: |
                pip | "$(Agent.OS)" | "$(python.version)"
                pip | "$(Agent.OS)"
                pip
              path: "$(PIP_CACHE_DIR)"

          - powershell: |
              # Calculate version based on branch/tag
              $majorVersion = $(majorVersion)
              $minorVersion = $(minorVersion)
              $patchVersion = $(patchVersion)

              # Get the build counter for the current version
              $buildRevision = $env:BUILD_BUILDNUMBER.Split('.')[-1]

              Write-Host "Build Source Branch: $env:BUILD_SOURCEBRANCH"
              Write-Host "Build Reason: $env:BUILD_REASON"
              Write-Host "Patch Version (auto-incremented): $patchVersion"

              if ($env:BUILD_SOURCEBRANCH -match "^refs/tags/v(.*)") {
                  # Tag build - use the version from the tag
                  $version = $matches[1]
                  $versionSuffix = ""
                  Write-Host "Tag build detected. Version from tag: $version"
              }
              elseif ($env:BUILD_SOURCEBRANCH -eq "refs/heads/main") {
                  # Main branch - use auto-incremented patch version
                  $version = "$majorVersion.$minorVersion.$patchVersion"
                  $versionSuffix = ""
                  Write-Host "Main branch build. Version: $version"
              }
              elseif ($env:BUILD_SOURCEBRANCH -match "^refs/heads/release/(.*)") {
                  # Release branch
                  $releaseName = $matches[1]
                  if ($releaseName -match "^(\d+)\.(\d+)") {
                      $majorVersion = $matches[1]
                      $minorVersion = $matches[2]
                  }
                  $version = "$majorVersion.$minorVersion.$patchVersion"
                  $versionSuffix = "rc$buildRevision"
                  Write-Host "Release branch build. Version: $version-$versionSuffix"
              }
              elseif ($env:BUILD_SOURCEBRANCH -eq "refs/heads/develop") {
                  # Develop branch - preview versions
                  $version = "$majorVersion.$minorVersion.$patchVersion"
                  $versionSuffix = "dev$buildRevision"
                  Write-Host "Develop branch build. Version: $version-$versionSuffix"
              }
              else {
                  # Feature branches or PRs
                  $version = "$majorVersion.$minorVersion.$patchVersion"
                  $branchName = $env:BUILD_SOURCEBRANCHNAME -replace '[^a-zA-Z0-9]', ''
                  $versionSuffix = "alpha$branchName$buildRevision"
                  Write-Host "Feature branch build. Version: $version-$versionSuffix"
              }

              # Set pipeline variables
              Write-Host "##vso[task.setvariable variable=versionPrefix]$version"
              Write-Host "##vso[task.setvariable variable=versionSuffix]$versionSuffix"

              if ($versionSuffix) {
                  Write-Host "##vso[build.updatebuildnumber]$version-$versionSuffix"
                  Write-Host "Final version: $version-$versionSuffix"
              }
              else {
                  Write-Host "##vso[build.updatebuildnumber]$version"
                  Write-Host "Final version: $version"
              }
            displayName: "Calculate version number"
            name: VersionStep

          # Skip UsePythonVersion - use agent's installed Python 3.12
          # - task: UsePythonVersion@0
          #   inputs:
          #     versionSpec: '$(python.version)'
          #   displayName: 'Use Python $(python.version)'

          - script: |
              python --version
              python -c "import sys; print('Python executable:', sys.executable)"
              pip --version
            displayName: 'Verify Python installation'

          - script: |
              echo "Upgrading pip with user permissions..."
              python -m pip install --user --upgrade pip build twine
              echo "Pip version after upgrade:"
              pip --version
            displayName: 'Upgrade pip with user install'

          - script: |
              echo "Installing dependencies with user permissions..."
              pip install --user -e ".[dev]" --verbose --no-cache-dir
            displayName: 'Install dependencies'

          - script: |
              python -m black --check src tests
            displayName: 'Check code formatting with Black'

          - script: |
              python -m ruff check src tests
            displayName: 'Run Ruff linting'

          - script: |
              python -m mypy src
            displayName: 'Run MyPy type checking'

          - script: |
              python -m pytest tests/ -v --tb=short --junitxml=test-results-$(python.version).xml --cov=src --cov-report=xml
            displayName: 'Run pytest with coverage'

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: 'test-results-$(python.version).xml'
              testRunTitle: 'Python $(python.version) Test Results'
            displayName: 'Publish test results'

          - task: PublishCodeCoverageResults@2
            condition: succeededOrFailed()
            inputs:
              summaryFileLocation: 'coverage.xml'
              pathToSources: 'src'
            displayName: 'Publish code coverage'

          # Only build package on Python 3.11 to avoid duplicates
          - script: |
              # Update version in pyproject.toml for build
              $version = "$(versionPrefix)"
              if ("$(versionSuffix)") {
                  $version = "$(versionPrefix)+$(versionSuffix)"
              }

              # Use sed to update version in pyproject.toml (works on Windows with Git Bash)
              (Get-Content pyproject.toml) -replace 'version = ".*"', "version = `"$version`"" | Set-Content pyproject.toml

              Write-Host "Updated pyproject.toml version to: $version"
              python -m build
            displayName: 'Build Python package'
            condition: eq(variables['python.version'], '3.12')

          - task: PublishBuildArtifacts@1
            condition: eq(variables['python.version'], '3.12')
            inputs:
              pathtoPublish: 'dist'
              artifactName: 'python-packages'
            displayName: 'Publish build artifacts'

  - stage: IntegrationTest
    displayName: "Integration Tests"
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: IntegrationJob
        displayName: 'Run Integration Tests'
        steps:
          # Skip UsePythonVersion - use agent's installed Python
          # - task: UsePythonVersion@0
          #   inputs:
          #     versionSpec: '$(pythonVersion)'
          #   displayName: 'Use Python $(pythonVersion)'

          - script: |
              python --version
              python -c "import sys; print('Python executable:', sys.executable)"
            displayName: 'Verify Python installation'

          - script: |
              echo "Installing core dependencies for integration tests..."
              pip install --user -e . --no-cache-dir --verbose
            displayName: 'Install dependencies for integration tests'

          - script: |
              # Test server startup
              timeout 10 python -c "from src.tusk.server import TuskServer; print('Server imports successfully')" 2>nul || echo "Server startup test completed"

              # Test basic functionality
              python -c "
              from src.tusk.models import Checkpoint, Task, Plan
              from src.tusk.config import TuskConfig
              config = TuskConfig()
              print('✅ Models import successfully')
              print('✅ Configuration loads successfully')
              "
            displayName: 'Run integration tests'

  - stage: PublishInternal
    displayName: "Publish to Azure DevOps"
    dependsOn: IntegrationTest
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: PublishToAzureDevOps
        displayName: "Publish to COA Feed"
        steps:
          - task: DownloadBuildArtifacts@1
            displayName: "Download artifacts"
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "python-packages"
              downloadPath: "$(System.ArtifactsDirectory)"

          - task: TwineAuthenticate@1
            displayName: 'Authenticate to Azure DevOps feed'
            inputs:
              artifactFeed: 'COA'

          - script: |
              python -m twine upload --repository-url $(PYPI_REPOSITORY_URL) $(System.ArtifactsDirectory)/python-packages/dist/*.whl
            displayName: 'Upload wheel to COA feed'

  - stage: PublishPyPI
    displayName: "Publish to PyPI"
    dependsOn: PublishInternal
    condition: and(succeeded(), eq(variables['shouldPublishToPyPI'], 'true'), eq(variables['isRelease'], 'true'))
    jobs:
      - job: PublishToPyPI
        displayName: "Publish to PyPI"
        steps:
          - task: DownloadBuildArtifacts@1
            displayName: "Download artifacts"
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "python-packages"
              downloadPath: "$(System.ArtifactsDirectory)"

          - task: TwineAuthenticate@1
            displayName: 'Authenticate to PyPI'
            inputs:
              externalFeeds: 'PyPI-ServiceConnection'

          - script: |
              python -m twine upload $(System.ArtifactsDirectory)/python-packages/dist/*
            displayName: 'Upload to PyPI'

  - stage: CreateGitTag
    displayName: "Create Git Tag"
    dependsOn: PublishPyPI
    condition: and(succeeded(), eq(variables['shouldCreateTag'], 'true'), eq(variables['isRelease'], 'true'))
    jobs:
      - job: CreateTag
        displayName: "Create Git Tag"
        steps:
          - checkout: self
            persistCredentials: true
            clean: true

          - powershell: |
              $version = "$(versionPrefix)"
              if ("$(versionSuffix)") {
                  $version = "$(versionPrefix)-$(versionSuffix)"
              }

              $tagName = "v$version"
              Write-Host "Creating tag: $tagName"

              git config user.name "Azure DevOps Build"
              git config user.email "build@coateam.dev"
              git tag -a $tagName -m "Release $version"
              git push origin $tagName

              Write-Host "Successfully created and pushed tag: $tagName"
            displayName: "Create and push git tag"